{
	"info": {
		"_postman_id": "913e83d1-f26a-4266-a8ad-57721cd6f0a6",
		"name": "Testes ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23023314"
	},
	"item": [
		{
			"name": "Validações do Login",
			"item": [
				{
					"name": "Login do usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"pm.environment.set(\"tokenWithBearer\", res.authorization);\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['authorization'];\r",
									"const tokenWithBearer = pm.environment.get(\"tokenWithBearer\");\r",
									"const responseValue = [tokenWithBearer];\r",
									"\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém ${chave}`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    responseValue.forEach((valor) => {\r",
									"        pm.test(`Verfica se ${chave} contém um token`, function (){\r",
									"            pm.expect(res[chave]).have.string(valor)\r",
									"        });\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(`Valida se o response contém a mensagem \"Login realizado com sucesso\"`, function () {\r",
									"    pm.expect(res.message).have.string('Login realizado com sucesso')\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{senha}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "CT1\n\nCENÁRIO ➡️ Login do usuário\n\nPRÉ-CONDIÇÕES ➡️ Usuário estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Ativar o body\n\n3\\. Informar o formato dos dados\n\n4\\. Inserir o e-mail\n\n5\\. Inserir a senha\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Login realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Login com e-mail e/ou senha inválidos",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyEmail = [\"message\"];\r",
									"\r",
									"responseKeyEmail.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém ${chave}`, function (){\r",
									"        const res = pm.response.json();\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Email e/ou senha inválidos\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Email e/ou senha inválidos\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email_invalido}}\",\r\n  \"password\": \"{{senha_invalida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						},
						"description": "CT2\n\nCENÁRIO ➡️ Login com e-mail e/ou senha inválidos\n\nÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Ativar o body\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Email e/ou senha inválidos**"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Pré-requisição: cadastro de usuário",
							"const url = pm.environment.get('baseurl');",
							"const senha = pm.environment.get('senha');",
							"const nome = pm.variables.replaceIn('{{$randomFullName}}');",
							"const email = pm.variables.replaceIn('{{$randomEmail}}');",
							"",
							"// Criar váriavel no ambiente local para chamar no body",
							"pm.environment.set(\"email\", email);",
							"",
							"const postUsuario = {",
							"    url: `${url}/usuarios`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'Host': 'localhost:3000'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"nome\": nome,",
							"            \"email\": email,",
							"            \"password\": senha,",
							"            \"administrador\": \"true\"",
							"        })",
							"    }",
							"}",
							"",
							"pm.sendRequest(postUsuario, (err, response) => {",
							"    const res = response.json();",
							"    console.log(err ? err : res);",
							"    try{",
							"        pm.environment.set('id',res['_id']);",
							"    } catch{",
							"        console.warn('FAIL');",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Testando uma chave do header",
							"pm.test(\"Content-Type está presente no header\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"// Testando o valor de uma chave do header",
							"pm.test(\"Content-Type está em JSON\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"// Testando se a palavra aparece ao lado do status code",
							"pm.test(\"O nome do status code está correto\", () => {",
							"  pm.expect(pm.response.status).to.have.oneOf([\"Bad Request\",'OK']);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Validações dos Usuários",
			"item": [
				{
					"name": "Cadastrar usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validar body da response\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém ${chave}`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Cadastro realizado com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Cadastro realizado com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									"const responseValueID = ['_id'];\r",
									"\r",
									"responseValueID.forEach((valor) => {\r",
									"    pm.test(`Verfica se response contém um ID`, function (){\r",
									"        pm.expect(res[valor]).to.exist\r",
									"    });\r",
									"})\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set('randomName', randomName);\r",
									"const randomEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"pm.environment.set('randomEmail', randomEmail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "CT3\n\nCENÁRIO ➡️ Cadastrar usuário\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Ativar o body\n\n3\\. Informar o formato dos dados\n\n4\\. Inserir um nome\n\n5\\. Inserir o e-mail\n\n6\\. Inserir senha\n\n7\\. Inserir adm\n\n8\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Cadastro realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Cadastrar usuário com email indisponível",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar body do response\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém ${chave}`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se contém mensagem \"Este email já está sendo usado\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Este email já está sendo usado\")\r",
									"    \r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomName}}\",\r\n  \"email\": \"{{emailCadastrado}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "CT4\n\nCENÁRIO ➡️ Cadastrar usuário com email indisponível\n\nPRÉ-CONDIÇÕES ➡️ E-mail já estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Ativar o body\n\n3\\. Informar o formato dos dados\n\n4\\. Inserir um nome\n\n5\\. Inserir o e-mail\n\n6\\. Inserir senha\n\n7\\. Inserir adm\n\n8\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Este e-mail já está sendo usado**"
					},
					"response": []
				},
				{
					"name": "Buscar usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyAmounth = ['quantidade'];\r",
									"const responseKeyUser = ['usuarios'];\r",
									"\r",
									"responseKeyAmounth.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"});\r",
									"\r",
									"responseKeyUser.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios"
							]
						},
						"description": "CT5\n\nCENÁRIO ➡️ Buscar usuários\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Lista de usuários**"
					},
					"response": []
				},
				{
					"name": "Buscar usuário por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test('Status code é igual a 200', function (){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const bodyMessage = ['nome','email','password','administrador','_id'];\r",
									"\r",
									"bodyMessage.forEach((atributos) => {\r",
									"    pm.test(`Verifica se o body contém '${atributos}'`, function(){\r",
									"        pm.expect(res[atributos]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						},
						"description": "CT6\n\nCENÁRIO ➡️ Buscar usuário por ID\n\nPRÉ-CONDIÇÕES ➡️ Usuário estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Informar o ID do usuário\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Usuário encontrado**"
					},
					"response": []
				},
				{
					"name": "Buscar usuário por ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['message'];\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica se a response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Usuário não encontrado\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Usuário não encontrado\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id_aleatorio}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id_aleatorio}}"
							]
						},
						"description": "CT7\n\nCENÁRIO ➡️ Buscar usuário por ID inexistente\n\nPRÉ-CONDIÇÕES ➡️ Usuário não estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Informar o ID do usuário\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Usuário não encontrado**"
					},
					"response": []
				},
				{
					"name": "Excluir usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Registro excluído com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Registro excluído com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						},
						"description": "CT8\n\nCENÁRIO ➡️ Excluir usuário\n\nPRÉ-CONDIÇÕES ➡️ Usuário estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID do usuário\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Registro excluído com sucesso**"
					},
					"response": []
				},
				{
					"name": "Excluir usuário sem registro",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Nenhum registro excluído\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Nenhum registro excluído\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id_aleatorio}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id_aleatorio}}"
							]
						},
						"description": "StartFragment\n\nCT9\n\nCENÁRIO ➡️ Excluir usuário sem registro  \n\nPRÉ-CONDIÇÕES ➡️ Usuário não estar cadastrado ou já ter sido excluído  \n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\.  Abrir uma requisição do tipo DELETE\n\n2\\.  Informar o ID do usuário\n\n3\\.  Enviar a requisição  \n\nRESULTADO ESPERADO ➡️ **Nenhum registro excluído**\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Excluir usuário com carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseurl');\r",
									"const email = pm.environment.get('email');\r",
									"const senha = pm.environment.get('senha');\r",
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"\r",
									"const postLogin = {\r",
									"    url: `${url}/login`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            'email': email,\r",
									"            'password': senha\r",
									"        })\r",
									"    }   \r",
									"}\r",
									"pm.sendRequest(postLogin, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set('tokenWithBearer', res.authorization);\r",
									"        const token = pm.environment.get('tokenWithBearer');\r",
									"        const postProduto = {\r",
									"            url: `${url}/produtos`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'authorization': token,\r",
									"                'Content-Type': 'application/json',\r",
									"                'Host': 'localhost:3000'\r",
									"            },\r",
									"            body: {  \r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify(\r",
									"                    {\r",
									"                        \"nome\": randomName,\r",
									"                        \"preco\": randomPrice,\r",
									"                        \"descricao\": randomPhrase,\r",
									"                        \"quantidade\": 1000\r",
									"                    }\r",
									"                )\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postProduto, (err, response) => {\r",
									"            const res = response.json();\r",
									"            console.log(err ? err : res);\r",
									"            try{\r",
									"                pm.environment.set(\"idProduto\", res['_id']);\r",
									"                const idProduto = pm.environment.get('idProduto')\r",
									"                const postCarrinho = {\r",
									"                    url: `${url}/carrinhos`,\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'authorization': token,\r",
									"                        'Content-Type': 'application/json',\r",
									"                        'Host': 'localhost:3000'\r",
									"                    },\r",
									"                    body: {  \r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                        \"produtos\": [\r",
									"                            {\r",
									"                                \"idProduto\": idProduto,\r",
									"                                \"quantidade\": 1\r",
									"                            }\r",
									"                        ]\r",
									"                        })\r",
									"                    }\r",
									"                }\r",
									"\r",
									"                pm.sendRequest(postCarrinho, (err, response) => {\r",
									"                    const res = response.json();\r",
									"                    console.log(err ? err : res);\r",
									"                    try{\r",
									"                        pm.environment.set(\"idCarrinho\", res['_id']);\r",
									"                    }catch{\r",
									"                        console.warn('FAIL3')\r",
									"                    }\r",
									"                })    \r",
									"            } catch {\r",
									"                console.warn('FAIL2')\r",
									"            }    \r",
									"        });\r",
									"    } catch{\r",
									"        console.warn('FAIL1')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message','idCarrinho'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(`Verfica se o response contém mensagem \"Não é permitido excluir usuário com carrinho cadastrado\"`, function (){\r",
									"    pm.expect(pm.response.text()).have.string(\"Não é permitido excluir usuário com carrinho cadastrado\")\r",
									"})\r",
									"\r",
									"// Excluí carinho e então usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const cancelaCompra = {\r",
									"    url: `${url}/carrinhos/cancelar-compra`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"pm.sendRequest(cancelaCompra, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        const deleteUsuario = {\r",
									"            url: `${url}/usuarios/${id}`,\r",
									"            method: 'delete',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Host': 'localhost:3000'\r",
									"            },\r",
									"        }\r",
									"        pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"            const res = response.json();\r",
									"            console.log(err ? err : res);\r",
									"        });\r",
									"    } catch{\r",
									"        console.warn('FAIL');\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						},
						"description": "CT10\n\nCENÁRIO ➡️ Excluir usuário com carrinho\n\nPRÉ-CONDIÇÕES ➡️ Usuário possuir um carrinho cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID do usuário\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Não é permitido excluir usuário com carrinho cadastrado**"
					},
					"response": []
				},
				{
					"name": "Editar usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Registro alterado com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Registro alterado com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						},
						"description": "StartFragment\n\nCT11\n\nCENÁRIO ➡️ Editar usuário  \n\nPRÉ-CONDIÇÕES ➡️ Usuário estar cadastrado  \n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\.  Abrir uma requisição do tipo PUT\n\n2\\.  Informar o ID\n\n3\\.  Ativar o body\n\n4\\.  Informar o formato dos dados\n\n5\\.  Inserir o dado alterado\n\n6\\.  Enviar a requisição  \n\nRESULTADO ESPERADO ➡️ **Registro alterado com sucesso**\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Cadastrar usuário caso o id não exista",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message','_id'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se o response contém mensagem \"Cadastro realizado com sucesso\"`, function (){\r",
									"    pm.expect(pm.response.text()).have.string(\"Cadastro realizado com sucesso\")\r",
									"})\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id_aleatorio}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id_aleatorio}}"
							]
						},
						"description": "CT12\n\nCENÁRIO ➡️ Cadastrar usuário caso o ID não exista\n\nPRÉ-CONDIÇÕES ➡️ ID inexistente\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo PUT\n\n2\\. Informar o ID\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir o dado alterado\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Cadastro realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Alterar email do usuário para email indisponível",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pré-requisição: cadastro de usuário\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"// Setar e-mail já utilizado\r",
									"pm.environment.set('emailCadastrado',emailAleatorio);\r",
									"\r",
									"const postUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nomeAleatorio,\r",
									"            \"email\": emailAleatorio,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar body\r",
									"const bodyMensage = ['nome','email','password','administrador'];\r",
									"\r",
									"bodyMensage.forEach((atributo) => {\r",
									"    pm.test(`Valida se o body contém '${atributo}'`, function () {\r",
									"        pm.expect(res[atributo]).to.undefined\r",
									"    })\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se o response contém mensagem \"Este email já está sendo usado\"`, function (){\r",
									"    pm.expect(pm.response.text()).have.string(\"Este email já está sendo usado\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"email\": \"{{emailCadastrado}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios/{{id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"{{id}}"
							]
						},
						"description": "CT13\n\nCENÁRIO ➡️ Alterar email do usuário para email indisponível\n\nPRÉ-CONDIÇÕES ➡️ E-mail já estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo PUT\n\n2\\. Ativar o body\n\n3\\. Informar o formato dos dados\n\n4\\. Inserir um nome\n\n5\\. Inserir o e-mail\n\n6\\. Inserir senha\n\n7\\. Inserir adm\n\n8\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Este e-mail já está sendo usado**"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Pré-requisição: cadastro de usuário",
							"const url = pm.environment.get('baseurl');",
							"const senha = pm.environment.get('senha');",
							"const nome = pm.variables.replaceIn('{{$randomFullName}}');",
							"const email = pm.variables.replaceIn('{{$randomEmail}}');",
							"",
							"// Criar váriaveis no ambiente local para chamar no body",
							"pm.environment.set(\"nome\", nome);",
							"pm.environment.set(\"email\", email);",
							"pm.environment.set(\"emailCadastrado\", email);",
							"",
							"// Criar um id aleatório",
							"const id = pm.variables.replaceIn('{{$$randomPassword}}');",
							"pm.environment.set('id_aleatorio',id);",
							"",
							"const postUsuario = {",
							"    url: `${url}/usuarios`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'Host': 'localhost:3000'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"nome\": nome,",
							"            \"email\": email,",
							"            \"password\": senha,",
							"            \"administrador\": \"true\"",
							"        })",
							"    }",
							"}",
							"",
							"pm.sendRequest(postUsuario, (err, response) => {",
							"    const res = response.json();",
							"    console.log(err ? err : res);",
							"    try{",
							"        pm.environment.set(\"id\", res['_id']);",
							"    } catch{",
							"        console.warn('FAIL');",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Testando uma chave do header",
							"pm.test(\"Content-Type está presente no header\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"// Testando o valor de uma chave do header",
							"pm.test(\"Content-Type está em JSON\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"// Testando se a palavra aparece ao lado do status code",
							"pm.test(\"O nome do status code está correto\", () => {",
							"  pm.expect(pm.response.status).to.have.oneOf([\"Bad Request\",'Created','OK']);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Validações dos Produtos",
			"item": [
				{
					"name": "Cadastrar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Cadastro realizado com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Cadastro realizado com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									"const responseValueID = ['_id'];\r",
									"\r",
									"responseValueID.forEach((valor) => {\r",
									"    pm.test(`Verfica se response contém um ID`, function (){\r",
									"        pm.expect(res[valor]).to.exist\r",
									"    });\r",
									"})\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = res['_id'];\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						},
						"description": "CT14\n\nCENÁRIO ➡️ Cadastrar produto\n\nPRÉ-CONDIÇÕES ➡️ Usuário ter autorização\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar o ID\n\n3\\. Informar o token\n\n4\\. Ativar o body\n\n5\\. Informar o formato dos dados\n\n6\\. Inserir os dados\n\n7\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Cadastro realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto com nome já utilizado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set('randomName',randomName);\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senhaValida');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"            'authorization': token,\r",
									"            'Content-Type': 'application/json',\r",
									"            'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            } \r",
									"        )\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['message'];\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Já existe produto com esse nome\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Já existe produto com esse nome\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						},
						"description": "CT15\n\nCENÁRIO ➡️ Cadastrar produto com nome já utilizado\n\nPRÉ-CONDIÇÕES ➡️ Nome indisponível\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar o ID\n\n3\\. Informar o token\n\n4\\. Ativar o body\n\n5\\. Informar o formato dos dados\n\n6\\. Inserir os dados\n\n7\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Já existe produto com esse nome**"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto sem autorização",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['message'];\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Token de acesso ausente...\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						},
						"description": "CT16\n\nCENÁRIO ➡️ Cadastrar produto sem autorização\n\nPRÉ-CONDIÇÕES ➡️ Usuário não habilitar autorização\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar o ID\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir os dados\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Token de acesso ausente, inválido, expirado ou usuário do token não existe mais**"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto com adm igual a false",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"const postUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nomeAleatorio,\r",
									"            \"email\": emailAleatorio,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        const postLogin = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Host': 'localhost:3000'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    'email': emailAleatorio,\r",
									"                    'password': senha\r",
									"                })\r",
									"            }   \r",
									"        }\r",
									"        pm.sendRequest(postLogin, (err, response) => {\r",
									"            const res = response.json();\r",
									"            console.log(err ? err : res);\r",
									"            try{\r",
									"                pm.environment.set('token', res.authorization.slice(7));\r",
									"                pm.environment.set('tokenWithBearer', res.authorization);\r",
									"            } catch{\r",
									"                console.warn('FAIL2')\r",
									"            }\r",
									"    });\r",
									"    }catch{\r",
									"        console.warn('FAIL1')\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Rota exclusiva para administradores\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Rota exclusiva para administradores\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						},
						"description": "CT17\n\nCENÁRIO ➡️ Cadastrar produto com adm igual a false\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar o ID\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir os dados\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Rota exclusiva para administradores**"
					},
					"response": []
				},
				{
					"name": "Buscar produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['quantidade','produtos'];\r",
									"\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica a lista de produtos contém ${chave}`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						},
						"description": "CT18\n\nCENÁRIO ➡️ Buscar produtos\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Lista de produtos**"
					},
					"response": []
				},
				{
					"name": "Buscar produto pelo ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            }  \r",
									"        )\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test('Status code é igual a 200', function (){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const bodyMessage = ['nome','preco','descricao','quantidade','_id'];\r",
									"\r",
									"bodyMessage.forEach((atributos) => {\r",
									"    pm.test(`Verifica se o body contém '${atributos}'`, function(){\r",
									"        pm.expect(res[atributos]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT19\n\nCENÁRIO ➡️ Buscar produto pelo ID\n\nPRÉ-CONDIÇÕES ➡️ Produto estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Informar o ID do produto\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Produto encontrado**"
					},
					"response": []
				},
				{
					"name": "Buscar produto pelo ID inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test('Status code é igual a 400', function (){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"const bodyMessage = ['message'];\r",
									"\r",
									"bodyMessage.forEach((atributo) => {\r",
									"    pm.test(`Verifica se o body contém '${atributo}'`, function(){\r",
									"        pm.expect(res[atributo]).to.exist\r",
									"    })\r",
									"    pm.test(`Verfica se ${atributo} contém mensagem \"Produto não encontrado\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Produto não encontrado\")\r",
									"    })\r",
									"})\r",
									"\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT20\n\nCENÁRIO ➡️ Buscar produto pelo ID inexistente\n\nPRÉ-CONDIÇÕES ➡️ Produto não estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Informar o ID do produto\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Produto não encontrado**"
					},
					"response": []
				},
				{
					"name": "Excluir produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            }  \r",
									"        )\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se a \"${chave}\" contém \"Registro excluído com sucesso`, function (){\r",
									"        pm.expect(res[chave]).have.string('Registro excluído com sucesso')\r",
									"    });\r",
									"    \r",
									"});\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT21\n\nCENÁRIO ➡️ Excluir produto\n\nPRÉ-CONDIÇÕES ➡️ Produto estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID do produto\n\n3\\. Informar o token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Registro excluído com sucesso**"
					},
					"response": []
				},
				{
					"name": "Excluir produto sem registro",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const idAleatorio = pm.variables.replaceIn('{{$randomPassword}}');\r",
									"pm.environment.set('id_aleatorio',idAleatorio);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se a \"${chave}\" contém \"Nenhum registro excluído`, function (){\r",
									"        pm.expect(res[chave]).have.string('Nenhum registro excluído')\r",
									"    });\r",
									"    \r",
									"});\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{id_aleatorio}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{id_aleatorio}}"
							]
						},
						"description": "CT22\n\nCENÁRIO ➡️ Excluir produto sem registro\n\nPRÉ-CONDIÇÕES ➡️ Produto não estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID do produto\n\n3\\. Informar o token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Nenhum registro excluído**"
					},
					"response": []
				},
				{
					"name": "Excluir produto que está em um carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            }  \r",
									"        )\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"        const idProduto = pm.environment.get('idProduto');\r",
									"        const token = pm.environment.get('tokenWithBearer');            \r",
									"            const postCarrinho = {\r",
									"                url: `${url}/carrinhos`,\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'authorization': token,\r",
									"                    'Content-Type': 'application/json',\r",
									"                    'Host': 'localhost:3000'\r",
									"                },\r",
									"                body: {  \r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                    \"produtos\": [\r",
									"                        {\r",
									"                            \"idProduto\": idProduto,\r",
									"                            \"quantidade\": 1\r",
									"                        }\r",
									"                    ]\r",
									"                    })\r",
									"                }\r",
									"            }\r",
									"\r",
									"            pm.sendRequest(postCarrinho, (err, response) => {\r",
									"                const res = response.json();\r",
									"                console.log(err ? err : res);\r",
									"                try{\r",
									"                    pm.environment.set(\"idCarrinho\", res['_id']);\r",
									"                }catch{\r",
									"                    console.warn('FAIL3')\r",
									"                } \r",
									"            });\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message', 'idCarrinhos'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(`Verfica se o response contém a mensagem \"Não é permitido excluir produto que faz parte de carrinho\"`, function (){\r",
									"        pm.expect(res.message).have.string('Não é permitido excluir produto que faz parte de carrinho')\r",
									"});\r",
									"\r",
									"// Excluí usuário, produto e carrinho cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteCarrinho = {\r",
									"    url: `${url}/carrinhos/cancelar-compra`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteCarrinho, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT23\n\nCENÁRIO ➡️ Excluir produto que está em um carrinho\n\nPRÉ-CONDIÇÕES ➡️ Produto estar em um carrinho\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID do produto\n\n3\\. Informar o token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Não é permitido excluir produto que faz parte de carrinho**"
					},
					"response": []
				},
				{
					"name": "Excluir produto sem token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se a reason phrase da request é a correta\", function () {\r",
									"        pm.expect(res.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"    });\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT24\n\nCENÁRIO ➡️ Excluir produto sem token\n\nPRÉ-CONDIÇÕES ➡️ Não ativar token\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID do produto\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Token de acesso ausente, inválido, expirado ou usuário do token não existe mais**"
					},
					"response": []
				},
				{
					"name": "Excluir produto com adm igual a false",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const token = pm.environment.get('tokenWithBearer'); \r",
									"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"           \r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"        },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            }              \r",
									"        )\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL3')\r",
									"    } \r",
									"});\r",
									"\r",
									"const postUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nomeAleatorio,\r",
									"            \"email\": emailAleatorio,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set('idUserFalse', res['_id'])\r",
									"        const postLogin = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Host': 'localhost:3000'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    'email': emailAleatorio,\r",
									"                    'password': senha\r",
									"                })\r",
									"            }   \r",
									"        }\r",
									"        pm.sendRequest(postLogin, (err, response) => {\r",
									"            const res = response.json();\r",
									"            console.log(err ? err : res);\r",
									"            try{\r",
									"                pm.environment.set('token', res.authorization.slice(7));\r",
									"                } catch{\r",
									"                console.warn('FAIL2')\r",
									"            }\r",
									"    });\r",
									"    }catch{\r",
									"        console.warn('FAIL1')\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Valida se a chave ${chave} contém a mensagem \"Rota exclusiva para administradores\"`, function () {\r",
									"        pm.expect(res.message).have.string('Rota exclusiva para administradores')\r",
									"    });\r",
									"});\r",
									"\r",
									"// Excluí usuário, produto e carrinho cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"\r",
									"const idFalse = pm.environment.get('idUserFalse');\r",
									"const deleteUsuarioFalse = {\r",
									"    url: `${url}/usuarios/${idFalse}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuarioFalse, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT25\n\nCENÁRIO ➡️ Excluir produto com adm igual a false\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar o ID\n\n3\\. Informar o token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Rota exclusiva para administradores**"
					},
					"response": []
				},
				{
					"name": "Editar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set('randomPhrase', randomPhrase);\r",
									"pm.environment.set('randomPrice', randomPrice);\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            }  \r",
									"        )\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Valida se a chave ${chave} contém a mensagem \"Registro alterado com sucesso\"`, function () {\r",
									"        pm.expect(res.message).have.string('Registro alterado com sucesso')\r",
									"    });\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{randomPrice}},\r\n  \"descricao\": \"{{randomPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "StartFragment\n\nCT26\n\nCENÁRIO ➡️ Editar produto  \n\nPRÉ-CONDIÇÕES ➡️ Produto estar cadastrado  \n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\.  Abrir uma requisição do tipo PUT\n\n2\\.  Informar o ID\n\n3\\.  Informar o token\n\n4\\.  Ativar o body\n\n5\\.  Informar o formato dos dados\n\n6\\.  Inserir dados alterados\n\n7\\.  Enviar a requisição  \n\nRESULTADO ESPERADO ➡️ **Registro alterado com sucesso**\n\nEndFragment"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto caso id não exista",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Criar um id aleatório\r",
									"const id = pm.variables.replaceIn('{{$$randomPassword}}');\r",
									"pm.environment.set('id_aleatorio',id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message','_id'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se o response contém mensagem \"Cadastro realizado com sucesso\"`, function (){\r",
									"    pm.expect(pm.response.text()).have.string(\"Cadastro realizado com sucesso\")\r",
									"})\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = res['_id'];\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{id_aleatorio}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{id_aleatorio}}"
							]
						},
						"description": "CT27\n\nCENÁRIO ➡️ Cadastrar produto caso o ID não exista\n\nPRÉ-CONDIÇÕES ➡️ ID inexistente\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo PUT\n\n2\\. Informar o ID\n\n3\\. Informar o token\n\n4\\. Ativar o body\n\n5\\. Informar o formato dos dados\n\n6\\. Inserir dados\n\n7\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Cadastro realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Editar produto com nome já utilizado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set('randomPrice',randomPrice);\r",
									"pm.environment.set('randomPhrase',randomPhrase);\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senhaValida');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto1 = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"            'authorization': token,\r",
									"            'Content-Type': 'application/json',\r",
									"            'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            } \r",
									"        )\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postProduto1, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL1')\r",
									"    } \r",
									"});\r",
									"\r",
									"const randomPrice2 = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase2 = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const nomeRepetido = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set('nomeRepetido',nomeRepetido);\r",
									"\r",
									"const postProduto2 = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"            'authorization': token,\r",
									"            'Content-Type': 'application/json',\r",
									"            'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": nomeRepetido,\r",
									"                \"preco\": randomPrice2,\r",
									"                \"descricao\": randomPhrase2,\r",
									"                \"quantidade\": 1000\r",
									"            } \r",
									"        )\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postProduto2, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto2\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL2')\r",
									"    } \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se \"${chave}\" contém a mensagem \"Já existe produto com esse nome\"`, function (){\r",
									"        pm.expect(res[chave]).have.string('Já existe produto com esse nome')\r",
									"    });\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const idProduto2 = pm.environment.get('idProduto2');\r",
									"const deleteProduto2 = {\r",
									"    url: `${url}/produtos/${idProduto2}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto2, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nomeRepetido}}\",\r\n  \"preco\": {{randomPrice}},\r\n  \"descricao\": \"{{randomPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT28\n\nCENÁRIO ➡️ Editar produto com nome já utilizado\n\nPRÉ-CONDIÇÕES ➡️ Nome indisponível\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo PUT\n\n2\\. Informar o ID\n\n3\\. Informar o token\n\n4\\. Ativar o body\n\n5\\. Informar o formato dos dados\n\n6\\. Inserir dados\n\n7\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Cadastro realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Editar produto sem autorização",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Valida se a reason phrase da request é a correta\", function () {\r",
									"        pm.expect(res.message).have.string('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"    });\r",
									"\r",
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT29\n\nCENÁRIO ➡️ Editar produto sem autorização\n\nPRÉ-CONDIÇÕES ➡️ Não informar o token\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo PUT\n\n2\\. Informar o ID\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir dados\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Token de acesso ausente, inválido, expirado ou usuário do token não existe mais**"
					},
					"response": []
				},
				{
					"name": "Editar produto com adm igual a false",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
									"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
									"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"pm.environment.set('randomName',randomName);\r",
									"pm.environment.set('randomPhrase',randomPhrase);\r",
									"pm.environment.set('randomPrice',randomPrice);\r",
									"\r",
									"const url = pm.environment.get('baseurl');\r",
									"const senha = pm.environment.get('senha');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const postProduto = {\r",
									"    url: `${url}/produtos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(\r",
									"            {\r",
									"                \"nome\": randomName,\r",
									"                \"preco\": randomPrice,\r",
									"                \"descricao\": randomPhrase,\r",
									"                \"quantidade\": 1000\r",
									"            }  \r",
									"        )\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set(\"idProduto\", res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    } \r",
									"});\r",
									"\r",
									"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
									"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"const postUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": nomeAleatorio,\r",
									"            \"email\": emailAleatorio,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(postUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set('idUserFalse',res['_id']);\r",
									"        const postLogin = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Host': 'localhost:3000'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    'email': emailAleatorio,\r",
									"                    'password': senha\r",
									"                })\r",
									"            }   \r",
									"        }\r",
									"        pm.sendRequest(postLogin, (err, response) => {\r",
									"            const res = response.json();\r",
									"            console.log(err ? err : res);\r",
									"            try{\r",
									"                pm.environment.set('token', res.authorization.slice(7));\r",
									"                pm.environment.set('tokenWithBearer', res.authorization);\r",
									"            } catch{\r",
									"                console.warn('FAIL2')\r",
									"            }\r",
									"    });\r",
									"    }catch{\r",
									"        console.warn('FAIL1')\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['message'];\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"});\r",
									"pm.test(\"Valida se a reason phrase da request é a correta\", function () {\r",
									"        pm.expect(res.message).have.string('Rota exclusiva para administradores')\r",
									"    });\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id2 = pm.environment.get('idUserFalse');\r",
									"const deleteUsuario2 = {\r",
									"    url: `${url}/usuarios/${id2}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario2, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"preco\": {{randomPrice}},\r\n  \"descricao\": \"{{randomPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos/{{idProduto}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos",
								"{{idProduto}}"
							]
						},
						"description": "CT30\n\nCENÁRIO ➡️ Editar produto com adm igual a false\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo PUT\n\n2\\. Informar o ID3. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir os dados\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Rota exclusiva para administradores**"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const url = pm.environment.get('baseurl');",
							"const senha = pm.environment.get('senha');",
							"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');",
							"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');",
							"",
							"const postUsuario = {",
							"    url: `${url}/usuarios`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'Host': 'localhost:3000'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"nome\": nomeAleatorio,",
							"            \"email\": emailAleatorio,",
							"            \"password\": senha,",
							"            \"administrador\": \"true\"",
							"        })",
							"    }",
							"}",
							"pm.sendRequest(postUsuario, (err, response) => {",
							"    const res = response.json();",
							"    console.log(err ? err : res);",
							"    try{",
							"        pm.environment.set('id',res['_id']);",
							"        const postLogin = {",
							"            url: `${url}/login`,",
							"            method: 'POST',",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'Host': 'localhost:3000'",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    'email': emailAleatorio,",
							"                    'password': senha",
							"                })",
							"            }   ",
							"        }",
							"        pm.sendRequest(postLogin, (err, response) => {",
							"            const res = response.json();",
							"            console.log(err ? err : res);",
							"            try{",
							"                pm.environment.set('token', res.authorization.slice(7));",
							"                pm.environment.set('tokenWithBearer', res.authorization);",
							"            } catch{",
							"                console.warn('FAIL2')",
							"            }",
							"    });",
							"    }catch{",
							"        console.warn('FAIL1')",
							"    }",
							"})"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Testando uma chave do header",
							"pm.test(\"Content-Type está presente no header\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"// Testando o valor de uma chave do header",
							"pm.test(\"Content-Type está em JSON\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"// Testando se a palavra aparece ao lado do status code",
							"pm.test(\"O nome do status code está correto\", () => {",
							"  pm.expect(pm.response.status).to.have.oneOf([\"Bad Request\",'Created','OK','Unauthorized','Forbidden']);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Validações dos Carrinhos",
			"item": [
				{
					"name": "Cadastrar carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Cadastro realizado com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Cadastro realizado com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									"const responseValueID = ['_id'];\r",
									"\r",
									"responseValueID.forEach((valor) => {\r",
									"    pm.test(`Verfica se response contém um ID`, function (){\r",
									"        pm.expect(res[valor]).to.exist\r",
									"    });\r",
									"})\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const cancelaCompra = {\r",
									"    url: `${url}/carrinhos/cancelar-compra`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"pm.sendRequest(cancelaCompra, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"})\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT31\n\nCENÁRIO ➡️ Cadastrar carrinho\n\nPRÉ-CONDIÇÕES ➡️ Produto estar cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar token\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir produtos\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Cadastro realizado com sucesso**"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho com produto duplicado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Não é permitido possuir produto duplicado\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Não é permitido possuir produto duplicado\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT32\n\nCENÁRIO ➡️ Cadastrar carrinho com produto duplicado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar token\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir produtos duplicados\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Não é permitido possuir produto duplicado**"
					},
					"response": []
				},
				{
					"name": "Cadastrar mais de um carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseurl');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const idProduto = pm.environment.get('idProduto')\r",
									"const postCarrinho = {\r",
									"    url: `${url}/carrinhos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"produtos\": [\r",
									"            {\r",
									"                \"idProduto\": idProduto,\r",
									"                \"quantidade\": 1\r",
									"            }\r",
									"        ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postCarrinho, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Não é permitido ter mais de 1 carrinho\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Não é permitido ter mais de 1 carrinho\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const cancelaCompra = {\r",
									"    url: `${url}/carrinhos/cancelar-compra`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"pm.sendRequest(cancelaCompra, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"})\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT33\n\nCENÁRIO ➡️ Cadastrar mais de um carrinho\n\nPRÉ-CONDIÇÕES ➡️ Já existir um carrinho cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar token\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir produtos\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Não é permitido ter mais de 1 carrinho**"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho com produto inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.variables.replaceIn('{{$randomPassword}}');\r",
									"pm.environment.set('id_aleatorio',id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Produto não encontrado\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Produto não encontrado\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id_aleatorio}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT34\n\nCENÁRIO ➡️ Cadastrar carrinho com produto inexistente\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar token\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir produtos\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Produto não encontrado**"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho com produto com estoque insuficiente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Produto não possui quantidade suficiente\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Produto não possui quantidade suficiente\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1001\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT35\n\nCENÁRIO ➡️ Cadastrar carrinho com produto com estoque insuficiente\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Informar token\n\n3\\. Ativar o body\n\n4\\. Informar o formato dos dados\n\n5\\. Inserir produtos\n\n6\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Produto não possui quantidade suficiente**"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho sem token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Token de acesso ausente...\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT36\n\nCENÁRIO ➡️ Cadastrar carrinho sem token\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo POST\n\n2\\. Ativar o body\n\n3\\. Informar o formato dos dados\n\n4\\. Inserir produtos\n\n5\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Token de acesso ausente, inválido, expirado ou usuário do token não existe mais**"
					},
					"response": []
				},
				{
					"name": "Buscar carrinhos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKey = ['quantidade','carrinhos'];\r",
									"\r",
									"\r",
									"responseKey.forEach((chave) => {\r",
									"    pm.test(`Verfica a lista de produtos contém ${chave}`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos"
							]
						},
						"description": "CT37\n\nCENÁRIO ➡️ Buscar carrinhos\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Lista de carrinhos**"
					},
					"response": []
				},
				{
					"name": "Buscar carrinho por ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseurl');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const idProduto = pm.environment.get('idProduto')\r",
									"const postCarrinho = {\r",
									"    url: `${url}/carrinhos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"produtos\": [\r",
									"            {\r",
									"                \"idProduto\": idProduto,\r",
									"                \"quantidade\": 1\r",
									"            }\r",
									"        ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postCarrinho, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"    try{\r",
									"        pm.environment.set('idCarrinho',res['_id']);\r",
									"    }catch{\r",
									"        console.warn('FAIL')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test('Status code é igual a 200', function (){\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"const bodyMessage = ['produtos','precoTotal','quantidadeTotal','idUsuario','_id'];\r",
									"\r",
									"bodyMessage.forEach((atributos) => {\r",
									"    pm.test(`Verifica se o body contém '${atributos}'`, function(){\r",
									"        pm.expect(res[atributos]).to.exist\r",
									"    })\r",
									"})\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const cancelaCompra = {\r",
									"    url: `${url}/carrinhos/cancelar-compra`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"pm.sendRequest(cancelaCompra, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"})\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/{{idCarrinho}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"{{idCarrinho}}"
							]
						},
						"description": "CT38\n\nCENÁRIO ➡️ Buscar carrinho por ID\n\nPRÉ-CONDIÇÕES ➡️ Existir um carrinho cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Carrinho encontrado**"
					},
					"response": []
				},
				{
					"name": "Buscar carrinho por ID inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const id = pm.variables.replaceIn('{{$randomPassword}}');\r",
									"pm.environment.set('id_aleatorio',id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test('Status code é igual a 400', function (){\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"const bodyMessage = ['message'];\r",
									"\r",
									"bodyMessage.forEach((atributo) => {\r",
									"    pm.test(`Verifica se o body contém '${atributo}'`, function(){\r",
									"        pm.expect(res[atributo]).to.exist\r",
									"    })\r",
									"    pm.test(`Verfica se ${atributo} contém mensagem \"Carrinho não encontrado\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Carrinho não encontrado\")\r",
									"    })\r",
									"})\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/{{id_aleatorio}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"{{id_aleatorio}}"
							]
						},
						"description": "CT39\n\nCENÁRIO ➡️ Buscar carrinhos por ID inexistente\n\nPRÉ-CONDIÇÕES ➡️ Não ter um carrinho cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo GET\n\n2\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Carrinho não encontrado**"
					},
					"response": []
				},
				{
					"name": "Finalizar compra",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseurl');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const idProduto = pm.environment.get('idProduto')\r",
									"const postCarrinho = {\r",
									"    url: `${url}/carrinhos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"produtos\": [\r",
									"            {\r",
									"                \"idProduto\": idProduto,\r",
									"                \"quantidade\": 1\r",
									"            }\r",
									"        ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postCarrinho, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Registro excluído com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Registro excluído com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const cancelaCompra = {\r",
									"    url: `${url}/carrinhos/cancelar-compra`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"pm.sendRequest(cancelaCompra, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"})\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/concluir-compra",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						},
						"description": "CT40\n\nCENÁRIO ➡️ Finalizar compra\n\nPRÉ-CONDIÇÕES ➡️ Existir um carrinho cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar qual o tipo de exclusão do carrinho (concluir/cancelar)\n\n3\\. Informar token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Registro excluído com sucesso**"
					},
					"response": []
				},
				{
					"name": "Finalizar compra sem ter carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Não foi encontrado carrinho para esse usuário\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Não foi encontrado carrinho para esse usuário\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						},
						"description": "CT41\n\nCENÁRIO ➡️ Finalizar compra sem ter carrinho\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar qual o tipo de exclusão do carrinho (concluir/cancelar)\n\n3\\. Informar token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Não foi encontrado carrinho para esse usuário**"
					},
					"response": []
				},
				{
					"name": "Finalizar compra sem token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Token de acesso ausente...\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/concluir-compra",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						},
						"description": "CT42\n\nCENÁRIO ➡️ Finalizar compra sem token\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar qual o tipo de exclusão do carrinho (concluir/cancelar)\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Token de acesso ausente, inválido, expirado ou usuário do token não existe mais**"
					},
					"response": []
				},
				{
					"name": "Cancelar compra e devolver produtos ao estoque",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseurl');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"const idProduto = pm.environment.get('idProduto')\r",
									"const postCarrinho = {\r",
									"    url: `${url}/carrinhos`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"    body: {  \r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"        \"produtos\": [\r",
									"            {\r",
									"                \"idProduto\": idProduto,\r",
									"                \"quantidade\": 1\r",
									"            }\r",
									"        ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postCarrinho, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Registro excluído com sucesso\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Registro excluído com sucesso\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						},
						"description": "CT43\n\nCENÁRIO ➡️ Cancelar compra e devolver produtos ao estoque\n\nPRÉ-CONDIÇÕES ➡️ Existir um carrinho cadastrado\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar qual o tipo de exclusão do carrinho (concluir/cancelar)\n\n3\\. Informar token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Registro excluído com sucesso. Estoque dos produtos reabastecido**"
					},
					"response": []
				},
				{
					"name": "Cancelar compra sem ter carrinho",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Não foi encontrado carrinho para esse usuário\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Não foi encontrado carrinho para esse usuário\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						},
						"description": "CT44\n\nCENÁRIO ➡️ Cancelar compra sem ter carrinho\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar qual o tipo de exclusão do carrinho (concluir/cancelar)\n\n3\\. Informar token\n\n4\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Não foi encontrado carrinho para esse usuário**"
					},
					"response": []
				},
				{
					"name": "Cancelar compra sem token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"// Validar status code\r",
									"pm.test(\"Status code é igual a 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validar mensagem\r",
									"const responseKeyMenssage = ['message'];\r",
									"\r",
									"responseKeyMenssage.forEach((chave) => {\r",
									"    pm.test(`Verfica se o response contém \"${chave}\"`, function (){\r",
									"        pm.expect(res[chave]).to.exist\r",
									"    });\r",
									"    pm.test(`Verfica se ${chave} contém mensagem \"Token de acesso ausente...\"`, function (){\r",
									"        pm.expect(pm.response.text()).have.string(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
									"    })\r",
									"});\r",
									"\r",
									"// Excluí usuário e produto cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const idProduto = pm.environment.get('idProduto');\r",
									"const token = pm.environment.get('tokenWithBearer');\r",
									"\r",
									"const deleteProduto = {\r",
									"    url: `${url}/produtos/${idProduto}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'authorization': token,\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteProduto, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});\r",
									"\r",
									"const id = pm.environment.get('id');\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						},
						"description": "CT45\n\nCENÁRIO ➡️ Cancelar compra sem token\n\nAÇÕES/PROCEDIMENTOS ➡️\n\n1\\. Abrir uma requisição do tipo DELETE\n\n2\\. Informar qual o tipo de exclusão do carrinho (concluir/cancelar)\n\n3\\. Enviar a requisição\n\nRESULTADO ESPERADO ➡️ **Token de acesso ausente, inválido, expirado ou usuário do token não existe mais**"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const url = pm.environment.get('baseurl');",
							"const senha = pm.environment.get('senha');",
							"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');",
							"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');",
							"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');",
							"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');",
							"const randomName = pm.variables.replaceIn('{{$randomFullName}}');",
							"",
							"const postUsuario = {",
							"    url: `${url}/usuarios`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'Host': 'localhost:3000'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"nome\": nomeAleatorio,",
							"            \"email\": emailAleatorio,",
							"            \"password\": senha,",
							"            \"administrador\": \"true\"",
							"        })",
							"    }",
							"}",
							"pm.sendRequest(postUsuario, (err, response) => {",
							"    const res = response.json();",
							"    console.log(err ? err : res);",
							"    try{",
							"        pm.environment.set('id',res['_id']);",
							"        const postLogin = {",
							"            url: `${url}/login`,",
							"            method: 'POST',",
							"            header: {",
							"                'Content-Type': 'application/json',",
							"                'Host': 'localhost:3000'",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    'email': emailAleatorio,",
							"                    'password': senha",
							"                })",
							"            }   ",
							"        }",
							"        pm.sendRequest(postLogin, (err, response) => {",
							"            const res = response.json();",
							"            console.log(err ? err : res);",
							"            try{",
							"                pm.environment.set('token', res.authorization.slice(7));",
							"                pm.environment.set('tokenWithBearer', res.authorization);",
							"                const token = pm.environment.get('tokenWithBearer');",
							"                const postProduto = {",
							"                    url: `${url}/produtos`,",
							"                    method: 'POST',",
							"                    header: {",
							"                        'authorization': token,",
							"                        'Content-Type': 'application/json',",
							"                        'Host': 'localhost:3000'",
							"                    },",
							"                    body: {  ",
							"                        mode: 'raw',",
							"                        raw: JSON.stringify(",
							"                            {",
							"                                \"nome\": randomName,",
							"                                \"preco\": randomPrice,",
							"                                \"descricao\": randomPhrase,",
							"                                \"quantidade\": 1000",
							"                            }  ",
							"                        )",
							"                    }",
							"                }",
							"                pm.sendRequest(postProduto, (err, response) => {",
							"                    const res = response.json();",
							"                    console.log(err ? err : res);",
							"                    try{",
							"                        pm.environment.set(\"idProduto\", res['_id']);",
							"                    }catch{",
							"                        console.warn('FAIL3')",
							"                    } ",
							"                });",
							"            } catch{",
							"                console.warn('FAIL2')",
							"            }",
							"    });",
							"    }catch{",
							"        console.warn('FAIL1')",
							"    }",
							"})"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Testando uma chave do header",
							"pm.test(\"Content-Type está presente no header\", () => {",
							"  pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"// Testando o valor de uma chave do header",
							"pm.test(\"Content-Type está em JSON\", () => {",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
							"});",
							"",
							"// Testando se a palavra aparece ao lado do status code",
							"pm.test(\"O nome do status code está correto\", () => {",
							"  pm.expect(pm.response.status).to.have.oneOf([\"Bad Request\",'Created','OK','Unauthorized']);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Validações dos Testes de Fluxos",
			"item": [
				{
					"name": "Fluxo de compra",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.environment.set(\"randomName\", nomeAleatorio);\r",
											"pm.environment.set(\"randomEmail\", emailAleatorio);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/usuarios",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o usuário foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/usuarios/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json()\r",
											"pm.environment.set(\"token\", res.authorization.slice(7));\r",
											"\r",
											"pm.test(\"Valida se o usuário foi logado\", function () {\r",
											"        pm.expect(res.message).have.string('Login realizado com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/produtos",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto pelo ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o produto foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/produtos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/carrinhos",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o carrinho foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/carrinhos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"carrinhos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Concluir compra",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.test(\"Verfica se a compra foi concluída\", function () {\r",
											"        pm.expect(res.message).have.string('Registro excluído com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/carrinhos/concluir-compra",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fluxo de cancelamento de compra",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.environment.set(\"randomName\", nomeAleatorio);\r",
											"pm.environment.set(\"randomEmail\", emailAleatorio);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/usuarios",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o usuário foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/usuarios/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json()\r",
											"pm.environment.set(\"token\", res.authorization.slice(7));\r",
											"\r",
											"pm.test(\"Valida se o usuário foi logado\", function () {\r",
											"        pm.expect(res.message).have.string('Login realizado com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomCatchPhrase}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/produtos",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produto pelo ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o produto foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/produtos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/carrinhos",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar carrinho por ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o carrinho foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/carrinhos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"carrinhos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancelar compra",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.test(\"Verfica se a compra foi concluída\", function () {\r",
											"        pm.expect(res.message).have.string('Registro excluído com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/carrinhos/cancelar-compra",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fluxo de criação, edição e exclusão de usuário",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"pm.environment.set('randomName', randomName);\r",
											"const randomEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.environment.set('randomEmail', randomEmail);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/usuarios",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar usuário por ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"const bodyMessage = ['_id'];\r",
											"\r",
											"bodyMessage.forEach((atributos) => {\r",
											"    pm.test(`Verifica se o usuário foi cadastrado`, function(){\r",
											"        pm.expect(res[atributos]).to.exist\r",
											"    })\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/usuarios/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Valida se o usuário foi editado\", function () {\r",
											"        pm.expect(res.message).have.string('Registro alterado com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/usuarios/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Valida se o usuário foi editado\", function () {\r",
											"        pm.expect(res.message).have.string('Registro excluído com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/usuarios/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"usuarios",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fluxo de criação, edição e exclusão de produto",
					"item": [
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pré-requisição: cadastro de usuário\r",
											"\r",
											"const url = pm.environment.get('baseurl');\r",
											"const senha = pm.environment.get('senha');\r",
											"const nomeAleatorio = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"const emailAleatorio = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"\r",
											"pm.environment.set(\"randomName\", nomeAleatorio);\r",
											"pm.environment.set(\"randomEmail\", emailAleatorio);\r",
											"\r",
											"const postUsuario = {\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Host': 'localhost:3000'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": nomeAleatorio,\r",
											"            \"email\": emailAleatorio,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postUsuario, (err, response) => {\r",
											"    const res = response.json();\r",
											"    console.log(err ? err : res);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"token\", res.authorization.slice(7));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"{{senha}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomPrice = pm.variables.replaceIn('{{$randomInt}}');\r",
											"pm.environment.set('randomPrice', randomPrice);\r",
											"const randomPhrase = pm.variables.replaceIn('{{$randomCatchPhrase}}');\r",
											"pm.environment.set('randomPhrase', randomPhrase);\r",
											"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"pm.environment.set('randomName', randomName);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"pm.environment.set(\"id\", res['_id']);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{randomName}}\",\r\n  \"preco\": {{randomPrice}},\r\n  \"descricao\": \"{{randomPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/produtos",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Busca produto pelo ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"const responseKeyID = ['_id'];\r",
											"\r",
											"responseKeyID.forEach((chave) => {\r",
											"    pm.test(`Verfica se o produto foi cadastrado`, function (){\r",
											"        pm.expect(res[chave]).to.exist\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/produtos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editar produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Valida se o produto foi editado\", function () {\r",
											"        pm.expect(res.message).have.string('Registro alterado com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomName}}\",\r\n  \"preco\": {{randomPrice}},\r\n  \"descricao\": \"{{randomPhrase}}\",\r\n  \"quantidade\": 1000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/produtos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const res = pm.response.json();\r",
											"\r",
											"pm.test(\"Valida se o produto foi excluído\", function () {\r",
											"        pm.expect(res.message).have.string('Registro excluído com sucesso')\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/produtos/{{id}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"produtos",
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Issues",
			"item": [
				{
					"name": "Qualquer requisição com JSON incorreto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{senha}}\"\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login sem body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login com senha inválida",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{senhaError}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Realizar login com email não cadastrado",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Excluí usuário cadastrado nas pre-requests\r",
									"const url = pm.environment.get('baseurl');\r",
									"const id = pm.environment.get('id');\r",
									"\r",
									"const deleteUsuario = {\r",
									"    url: `${url}/usuarios/${id}`,\r",
									"    method: 'delete',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Host': 'localhost:3000'\r",
									"    },\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteUsuario, (err, response) => {\r",
									"    const res = response.json();\r",
									"    console.log(err ? err : res);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email_nao_cadastrado}}\",\r\n  \"password\": \"{{senha}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar usuário com email inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{email_invalido}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar usuário com adm diferente de boolean",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{senha}}\",\r\n  \"administrador\": \"{{adm_invalido}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/usuarios",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar usuário sem body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/usuarios/asd",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"usuarios",
								"asd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar produto sem body",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/produtos",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Pré-requisição: cadastro de usuário",
							"const url = pm.environment.get('baseurl');",
							"const senha = pm.environment.get('senha');",
							"const nome = pm.variables.replaceIn('{{$randomFullName}}');",
							"const email = pm.variables.replaceIn('{{$randomEmail}}');",
							"",
							"// Criar váriavel no ambiente local para chamar no body",
							"pm.environment.set(\"email\", email);",
							"",
							"const postUsuario = {",
							"    url: `${url}/usuarios`,",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'Host': 'localhost:3000'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"nome\": nome,",
							"            \"email\": email,",
							"            \"password\": senha,",
							"            \"administrador\": \"true\"",
							"        })",
							"    }",
							"}",
							"",
							"pm.sendRequest(postUsuario, (err, response) => {",
							"    const res = response.json();",
							"    console.log(err ? err : res);",
							"    try{",
							"        pm.environment.set('id',res['_id']);",
							"    } catch{",
							"        console.warn('FAIL');",
							"    }",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}